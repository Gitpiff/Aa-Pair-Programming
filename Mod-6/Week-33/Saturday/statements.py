###########################################################
# AN ALGORITHM
# An algorithm for performing this without a data structure
# means you have to think about what you're trying to look
# for.
#
# If you scan the string two characters at a time, when they
# change, you know that you have started a new sequence of
# numbers. You can add the current number of characters that
# you've scanned to a result.
#
# For example, say you had "111221". You would start the
# count at 1 and compare the characters at indices 0 and 1.
# Since they are the same, you would increment the current
# count to two, because you will have found two 1s. Then,
# you would compare the characters at indices 1 and 2.
# Again, they are both 1s, so you would increment the count
# to 3. The next comparison, the one at indices 2 and 3
# yields the characters "1" and "2". At this point, the
# characters have changed. The current count is 3, and the
# current character is "1", so you would concatenate those
# onto a result "31". Then, you would set the current count
# back to 1 (because you have found one 2), and continue
# with the same process.


############################################################
# PSEUDOCODE
#
# Concatenate an empty space to the end of the value passed
#    into the function. This will let you compare the entire
#    length of the original string with a guarantee that the
#    two last characters do not match.
# Create an empty string to which you will append the
#    counts and digits
# Initialize an index to 0 for looping over the string
# Initialize a counter variable to record the count of the
#    current character
# Using the index variable, loop from 0 to the length of the
#    string minus 1 (because you don't want to examine the
#    last character, the space that you added)
#   If the current character is not equal to the next
#      character, then concatenate the current count and the
#      current character to the result string and set the
#      current count back to 1
#   Otherwise, just increment the current character count by
#      1
#   Increment the index by 1
# Return the result


# Sequence of Numbers
# The sequence of numbers is generated by describing each group
# of identical digits in the previous term.

# Given a string of numbers,
# translate the string into a sequence of numbers that describes the count of
# identical digits.

# For example, the string "1" has "one 1" and would be
# translated to 11.

# The string "11" is interpreted as "two 1s" which is
# translated to 21.

# The string "1211" is interpreted as "one 1, one 2,
# two 1s" which is translated to 111221.

# This is a tough one. Try not
# to look at the solution unless you spend more than 30 minutes on it.

# Write your function, here.
# There are hints after the print statements
def seq_of_numbers(term):
    term += ' '
    i = 0
    current_count = 1
    res = ""
    while i < len(term)-1:
        if term[i] != term[i+1]:
            res = res + str(current_count) + term[i]
            current_count = 1
        else:
            current_count += 1
        i += 1
    return res


print(seq_of_numbers("1211"))
# This is "one 1, one 2, two 1s"
# Prints "111221"

print(seq_of_numbers("111221"))
# This is "three 1s, two 2s, and one 1"
# Prints "312211"

print(seq_of_numbers("31131211131221"))
# This is "one 3, two 1s, one 3, one 1, one 2, three 1s,
#    one 3, one 1, two 2s, and one 1"
# Prints "13211311123113112211"



# Split On Capitals
# Create a function which adds spaces before every capital in a word. Lower case the whole string afterwards.

# Write your function, here.
def cap_space(s):
  result = ""
  i = 0
  while i < len(s):
    if s[i].isupper():
      result += " "
    result += s[i]
    i += 1
  return result.lower()


print(cap_space("helloWorld"))     #> "hello world"
print(cap_space("iLoveMyTeapot"))  #> "i love my teapot"
print(cap_space("stayIndoors"))    #> "stay indoors"



# Count Characters In String
# Create a function that takes two strings as arguments and returns the number of times the first string (the single character) is found in the second string.

# Write your function, here.
def char_count(c, s):
  count = 0
  for x in s:
    if c == x:
      count += 1
  return count 



print(char_count("a", "App Academy"))         #> 1
print(char_count("c", "Chamber of Secrets"))  #> 1
print(char_count("b", "big fat bubble"))      #> 4


# Vowel Count
# Create a function called vowel_count that takes in a string and returns a count of how many vowels are in the string.

# Write your solution here.
def vowel_count(string):
  count = 0
  vowel = 'aeiouAEIOU'
  for i in string:
    if i in vowel:
      count += 1
  return count 


print(vowel_count("App Academy"))         #> 4
print(vowel_count("Coding Expert"))       #> 4
print(vowel_count("Supreme"))             #> 3
print(vowel_count("Chamber of Secrets"))  #> 5


# Add Upper
# Create a function add_upper that takes a string and returns all of the uppercase characters in the string.

# Write your solution here.
def add_upper(string):
  result = ""
  for i in string:
    if i == i.upper():
      result += i
  return result 


print(add_upper("ApPlE"))        #> APE
print(add_upper("Coding"))       #> C
print(add_upper("PIano"))        #> PI
print(add_upper("SUPREME"))      #> SUPREME
